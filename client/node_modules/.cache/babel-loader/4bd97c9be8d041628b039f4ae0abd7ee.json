{"ast":null,"code":"import { ADD_MESSAGE } from \"../actions\";\nimport { DELETE_MESSAGE } from \"../actions\";\nimport messages, { state } from \"../components/Messages\";\nconst initialMessages = {\n  messages: messages.messages // reducer function takes two arguments: 1) state (set with above array) & 2) an action\n  // reducer returns a new state based on the action, updating the given(old) state accordingly\n\n};\n\nconst messageReducer = (state = initialMessages, action) => {\n  console.log(state);\n\n  switch (action.type) {\n    case 'DELETE_MESSAGE':\n      console.log(action);\n      let newMessages = state.backend.messages.filter(message => {\n        return action.id !== message.id;\n      });\n      return {\n        messages: newMessages\n      };\n\n    case 'ADD_MESSAGE':\n      console.log(action);\n      const newState = state.backend.messages.slice(0);\n      newState.push(action.payload);\n      return {\n        messages: newState\n      };\n\n    default:\n      console.log(state);\n      return state;\n  }\n};\n\nexport default messageReducer;","map":{"version":3,"sources":["/Users/mikepowar/a2React-Ninja-master/src/reducers/messageReducer.js"],"names":["ADD_MESSAGE","DELETE_MESSAGE","messages","state","initialMessages","messageReducer","action","console","log","type","newMessages","backend","filter","message","id","newState","slice","push","payload"],"mappings":"AAAA,SAASA,WAAT,QAA4B,YAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAOC,QAAP,IAAmBC,KAAnB,QAAgC,wBAAhC;AAEA,MAAMC,eAAe,GAAG;AACpBF,EAAAA,QAAQ,EAAEA,QAAQ,CAACA,QADC,CAIxB;AACA;;AALwB,CAAxB;;AAMA,MAAMG,cAAc,GAAG,CAACF,KAAK,GAAGC,eAAT,EAA0BE,MAA1B,KAAqC;AACxDC,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;;AACA,UAAQG,MAAM,CAACG,IAAf;AACI,SAAK,gBAAL;AACIF,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAII,WAAW,GAAGP,KAAK,CAACQ,OAAN,CAAcT,QAAd,CAAuBU,MAAvB,CAA8BC,OAAO,IAAI;AACvD,eAAOP,MAAM,CAACQ,EAAP,KAAcD,OAAO,CAACC,EAA7B;AACH,OAFiB,CAAlB;AAGA,aAAO;AACHZ,QAAAA,QAAQ,EAAEQ;AADP,OAAP;;AAIJ,SAAK,aAAL;AACIH,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,YAAMS,QAAQ,GAAGZ,KAAK,CAACQ,OAAN,CAAcT,QAAd,CAAuBc,KAAvB,CAA6B,CAA7B,CAAjB;AACAD,MAAAA,QAAQ,CAACE,IAAT,CAAcX,MAAM,CAACY,OAArB;AACA,aAAO;AACHhB,QAAAA,QAAQ,EAAEa;AADP,OAAP;;AAIJ;AACIR,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,aAAOA,KAAP;AApBR;AAuBH,CAzBD;;AA2BA,eAAeE,cAAf","sourcesContent":["import { ADD_MESSAGE } from \"../actions\";\nimport { DELETE_MESSAGE } from \"../actions\";\nimport messages, { state } from \"../components/Messages\";\n\nconst initialMessages = {\n    messages: messages.messages\n        }\n\n// reducer function takes two arguments: 1) state (set with above array) & 2) an action\n// reducer returns a new state based on the action, updating the given(old) state accordingly\nconst messageReducer = (state = initialMessages, action) => {\n    console.log(state);\n    switch (action.type){\n        case 'DELETE_MESSAGE':\n            console.log(action);  \n            let newMessages = state.backend.messages.filter(message => {\n                return action.id !== message.id\n            });\n            return {\n                messages: newMessages\n                };\n        \n        case 'ADD_MESSAGE':\n            console.log(action);\n            const newState = state.backend.messages.slice(0);\n            newState.push(action.payload);\n            return {\n                messages: newState\n            };\n\n        default:\n            console.log(state); \n            return state;\n            \n    }\n}\n\nexport default messageReducer\n\n\n"]},"metadata":{},"sourceType":"module"}