{"ast":null,"code":"import _objectSpread from \"/Users/mikepowar/a2React-Ninja-master/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axios from 'axios';\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE'; // not used in setup as is because actions are called in components and then adjusted\n// in reducer.\n\nexport function addMessage(message) {\n  return {\n    type: ADD_MESSAGE,\n    payload: message\n  };\n} //pass index or message\n\nexport function deleteMessage(message) {\n  return {\n    type: DELETE_MESSAGE,\n    payload: message\n  };\n} //New from thunk tutorial (https://alligator.io/redux/redux-thunk/)\n\nexport const ADD_MESSAGE_SUCCESS = 'ADD_MESSAGE_SUCCESS';\nexport const ADD_MESSAGE_FAILURE = 'ADD_MESSAGE_FAILURE';\nexport const ADD_MESSAGE_STARTED = 'ADD_MESSAGE_STARTED'; //export const addMessage = ({ title, userId }) => {\n//TODO: could end up changing {message} to props ? as above\n\nexport const addMessageAxios = message => {\n  //TODO: look more into getState and how to use here\n  //return (dispatch, getState) => {\n  return dispatch => {\n    dispatch(addMessageStarted()); //console.log('current state: ', getState());\n    //TODO: note: those aren't quotation marks for http address\n\n    axios.post('http://localhost:3001/messages', {\n      name,\n      message,\n      id\n    }).then(res => {\n      setTimeout(() => {\n        dispatch(addMessageSuccess(res.data));\n      }, 2500); //dispatch(addMessageSuccess(res.data));\n    }).catch(err => {\n      dispatch(addMessageFailure(err.message));\n    });\n  };\n};\n\nconst addMessageSuccess = message => ({\n  type: ADD_MESSAGE_SUCCESS,\n  payload: _objectSpread({}, message)\n});\n\nconst addMessageStarted = () => ({\n  type: ADD_MESSAGE_STARTED\n});\n\nconst addMessageFailure = error => ({\n  type: ADD_MESSAGE_FAILURE,\n  payload: {\n    error\n  }\n});","map":{"version":3,"sources":["/Users/mikepowar/a2React-Ninja-master/src/actions/index.jsx"],"names":["axios","ADD_MESSAGE","DELETE_MESSAGE","addMessage","message","type","payload","deleteMessage","ADD_MESSAGE_SUCCESS","ADD_MESSAGE_FAILURE","ADD_MESSAGE_STARTED","addMessageAxios","dispatch","addMessageStarted","post","name","id","then","res","setTimeout","addMessageSuccess","data","catch","err","addMessageFailure","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAEP;AACA;;AAEA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA4B;AAC/B,SAAO;AAAEC,IAAAA,IAAI,EAAEJ,WAAR;AAAqBK,IAAAA,OAAO,EAAEF;AAA9B,GAAP;AACH,C,CAED;;AACA,OAAO,SAASG,aAAT,CAAuBH,OAAvB,EAA+B;AAClC,SAAO;AAAEC,IAAAA,IAAI,EAAEH,cAAR;AAAwBI,IAAAA,OAAO,EAAEF;AAAjC,GAAP;AACH,C,CAED;;AAEA,OAAO,MAAMI,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B,C,CAIP;AACI;;AACJ,OAAO,MAAMC,eAAe,GAAIP,OAAD,IAAa;AACxC;AACA;AACA,SAAQQ,QAAD,IAAc;AACrBA,IAAAA,QAAQ,CAACC,iBAAiB,EAAlB,CAAR,CADqB,CAGrB;AAEA;;AACAb,IAAAA,KAAK,CACAc,IADL,CACU,gCADV,EAC4C;AACxCC,MAAAA,IADwC;AAExCX,MAAAA,OAFwC;AAGxCY,MAAAA;AAHwC,KAD5C,EAMKC,IANL,CAMUC,GAAG,IAAI;AACTC,MAAAA,UAAU,CAAC,MAAM;AACbP,QAAAA,QAAQ,CAACQ,iBAAiB,CAACF,GAAG,CAACG,IAAL,CAAlB,CAAR;AACH,OAFS,EAEP,IAFO,CAAV,CADS,CAIT;AACH,KAXL,EAYKC,KAZL,CAYWC,GAAG,IAAI;AACVX,MAAAA,QAAQ,CAACY,iBAAiB,CAACD,GAAG,CAACnB,OAAL,CAAlB,CAAR;AACH,KAdL;AAeC,GArBD;AAsBH,CAzBM;;AA2BP,MAAMgB,iBAAiB,GAAGhB,OAAO,KAAK;AAClCC,EAAAA,IAAI,EAAEG,mBAD4B;AAElCF,EAAAA,OAAO,oBACAF,OADA;AAF2B,CAAL,CAAjC;;AAOA,MAAMS,iBAAiB,GAAG,OAAO;AAC7BR,EAAAA,IAAI,EAAEK;AADuB,CAAP,CAA1B;;AAIA,MAAMc,iBAAiB,GAAGC,KAAK,KAAK;AAChCpB,EAAAA,IAAI,EAAEI,mBAD0B;AAEhCH,EAAAA,OAAO,EAAE;AACLmB,IAAAA;AADK;AAFuB,CAAL,CAA/B","sourcesContent":["import axios from 'axios';\n\nexport const ADD_MESSAGE = 'ADD_MESSAGE'\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE'\n\n// not used in setup as is because actions are called in components and then adjusted\n// in reducer.\n\nexport function addMessage(message){\n    return { type: ADD_MESSAGE, payload: message }\n}\n\n//pass index or message\nexport function deleteMessage(message){\n    return { type: DELETE_MESSAGE, payload: message }\n}\n\n//New from thunk tutorial (https://alligator.io/redux/redux-thunk/)\n\nexport const ADD_MESSAGE_SUCCESS = 'ADD_MESSAGE_SUCCESS';\nexport const ADD_MESSAGE_FAILURE = 'ADD_MESSAGE_FAILURE';\nexport const ADD_MESSAGE_STARTED = 'ADD_MESSAGE_STARTED';\n\n\n\n//export const addMessage = ({ title, userId }) => {\n    //TODO: could end up changing {message} to props ? as above\nexport const addMessageAxios = (message) => {\n    //TODO: look more into getState and how to use here\n    //return (dispatch, getState) => {\n    return (dispatch) => {\n    dispatch(addMessageStarted());\n\n    //console.log('current state: ', getState());\n\n    //TODO: note: those aren't quotation marks for http address\n    axios\n        .post('http://localhost:3001/messages', {\n        name,\n        message,\n        id\n        })\n        .then(res => {\n            setTimeout(() => {\n                dispatch(addMessageSuccess(res.data));  \n            }, 2500);\n            //dispatch(addMessageSuccess(res.data));\n        })\n        .catch(err => {\n            dispatch(addMessageFailure(err.message));\n        });\n    };\n};\n\nconst addMessageSuccess = message => ({\n    type: ADD_MESSAGE_SUCCESS,\n    payload: {\n        ...message\n    }\n});\n\nconst addMessageStarted = () => ({\n    type: ADD_MESSAGE_STARTED\n});\n\nconst addMessageFailure = error => ({\n    type: ADD_MESSAGE_FAILURE,\n    payload: {\n        error\n    }\n});"]},"metadata":{},"sourceType":"module"}