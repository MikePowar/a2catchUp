{"ast":null,"code":"import _objectSpread from \"/Users/mikepowar/a2React-Ninja-master/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_MESSAGES_BEGIN, FETCH_MESSAGES_FAULURE, FETCH_MESSAGES_SUCCESS } from '../actions/backendActions';\nimport { ADD_MESSAGE } from \"../actions\";\nimport { DELETE_MESSAGE } from \"../actions\";\nimport { ADD_MESSAGE_SUCCESS, ADD_MESSAGE_FAILURE, ADD_MESSAGE_STARTED } from '../actions/index';\nimport axios from 'axios';\nconst initState = {\n  messages: [],\n  loading: false,\n  error: null\n};\n\nconst backendReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'FETCH_MESSAGES_BEGIN':\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case 'FETCH_MESSAGES_FAILURE':\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        messages: []\n      });\n\n    case 'FETCH_MESSAGES_SUCCESS':\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        messages: action.payload.messages\n      });\n\n    case 'DELETE_MESSAGE':\n      console.log(action);\n      let newMessages = state.messages.filter(message => {\n        return action._id !== message._id;\n      });\n      return {\n        messages: newMessages\n      };\n    // axios.\n    //     delete('/messages', action.id)\n    //     .then(res => {\n    //         let newMessages = state.messages.filter(message => {\n    //             return action.id !== message.id\n    //                 });\n    //             return {\n    //                 messages: newMessages\n    //             };\n    //     })\n    //     .catch(err => {\n    //         console.log(err)\n    //     });\n    //TODO: Get one AddMessage working        \n    // case 'ADD_MESSAGE':\n    //         console.log(action);\n    //         const newState = state.messages.slice(0);\n    //         newState.push(action.payload);\n    //         return {\n    //             messages: newState\n    //             };\n    //TODO: new cases for adding Messages with post request from tutorial ()\n\n    case 'ADD_MESSAGE_STARTED':\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case 'ADD_MESSAGE_SUCCESS':\n      //const newState = state.messages.slice(0);\n      //newState.push(action.payload);    \n      return _objectSpread({}, state, {\n        messages: [...state.messages, action.payload],\n        //messages: newState,\n        loading: false,\n        error: null\n      });\n\n    case 'ADD_MESSAGE_FAILURE':\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default backendReducer;","map":{"version":3,"sources":["/Users/mikepowar/a2React-Ninja-master/src/reducers/backend.js"],"names":["FETCH_MESSAGES_BEGIN","FETCH_MESSAGES_FAULURE","FETCH_MESSAGES_SUCCESS","ADD_MESSAGE","DELETE_MESSAGE","ADD_MESSAGE_SUCCESS","ADD_MESSAGE_FAILURE","ADD_MESSAGE_STARTED","axios","initState","messages","loading","error","backendReducer","state","action","type","payload","console","log","newMessages","filter","message","_id"],"mappings":";AAAA,SAASA,oBAAT,EAA+BC,sBAA/B,EAAuDC,sBAAvD,QAAqF,2BAArF;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,mBAAnD,QAA8E,kBAA9E;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,EADI;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAMA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA+B;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,sBAAL;AACI;AACA;AACI,+BACOF,KADP;AAEIH,QAAAA,OAAO,EAAE,IAFb;AAGIC,QAAAA,KAAK,EAAE;AAHX;;AAKR,SAAK,wBAAL;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BACOE,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL,KAH1B;AAIIF,QAAAA,QAAQ,EAAE;AAJd;;AAMJ,SAAK,wBAAL;AACI;AACA;AACA,+BACOI,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGID,QAAAA,QAAQ,EAAEK,MAAM,CAACE,OAAP,CAAeP;AAH7B;;AAKJ,SAAK,gBAAL;AACQQ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,UAAIK,WAAW,GAAGN,KAAK,CAACJ,QAAN,CAAeW,MAAf,CAAsBC,OAAO,IAAI;AAC/C,eAAOP,MAAM,CAACQ,GAAP,KAAeD,OAAO,CAACC,GAA9B;AACK,OAFS,CAAlB;AAGI,aAAO;AACHb,QAAAA,QAAQ,EAAEU;AADP,OAAP;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAK,qBAAL;AACI,+BACON,KADP;AAEIH,QAAAA,OAAO,EAAE;AAFb;;AAIJ,SAAK,qBAAL;AACQ;AACA;AACJ,+BAEWG,KAFX;AAGQJ,QAAAA,QAAQ,EAAE,CAAC,GAAGI,KAAK,CAACJ,QAAV,EAAoBK,MAAM,CAACE,OAA3B,CAHlB;AAIQ;AACAN,QAAAA,OAAO,EAAE,KALjB;AAMQC,QAAAA,KAAK,EAAE;AANf;;AAQJ,SAAK,qBAAL;AACI,+BACOE,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAH1B;;AAKJ;AACI,aAAOE,KAAP;AAvFR;AAyFC,CA1FL;;AA4FA,eAAeD,cAAf","sourcesContent":["import { FETCH_MESSAGES_BEGIN, FETCH_MESSAGES_FAULURE, FETCH_MESSAGES_SUCCESS } from '../actions/backendActions';\nimport { ADD_MESSAGE } from \"../actions\";\nimport { DELETE_MESSAGE } from \"../actions\";\nimport { ADD_MESSAGE_SUCCESS, ADD_MESSAGE_FAILURE, ADD_MESSAGE_STARTED } from '../actions/index';\nimport axios from 'axios';\n\nconst initState = {\n    messages: [],\n    loading: false,\n    error: null\n};\n\nconst backendReducer = (state = initState, action) => {\n    switch (action.type){\n        case 'FETCH_MESSAGES_BEGIN':\n            // Mark the state as \"loading\" so we can show a spinner or something\n            // Also, reset any errors. We're starting fresh.\n                return {\n                    ...state,\n                    loading: true,\n                    error: null\n                };\n        case 'FETCH_MESSAGES_FAILURE':\n            // The request failed. It's done. So set loading to \"false\".\n            // Save the error, so we can display it somewhere.\n            // Since it failed, we don't have items to display anymore, so set `items` empty.\n            //\n            // This is all up to you and your app though:\n            // maybe you want to keep the items around!\n            // Do whatever seems right for your use case.\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error,\n                messages: []\n                };\n        case 'FETCH_MESSAGES_SUCCESS':\n            // All done: set loading \"false\".\n            // Also, replace the items with the ones from the server\n            return {\n                ...state,\n                loading: false,\n                messages: action.payload.messages\n            };\n        case 'DELETE_MESSAGE':\n                console.log(action);\n                let newMessages = state.messages.filter(message => {\n                    return action._id !== message._id\n                        });\n                    return {\n                        messages: newMessages\n                        };\n                // axios.\n                //     delete('/messages', action.id)\n                //     .then(res => {\n                //         let newMessages = state.messages.filter(message => {\n                //             return action.id !== message.id\n                //                 });\n                //             return {\n                //                 messages: newMessages\n                //             };\n                //     })\n                //     .catch(err => {\n                //         console.log(err)\n                //     });\n                \n                \n                \n        //TODO: Get one AddMessage working        \n        // case 'ADD_MESSAGE':\n        //         console.log(action);\n        //         const newState = state.messages.slice(0);\n        //         newState.push(action.payload);\n        //         return {\n        //             messages: newState\n        //             };\n        //TODO: new cases for adding Messages with post request from tutorial ()\n        case 'ADD_MESSAGE_STARTED':\n            return {\n                ...state,\n                loading: true\n            };\n        case 'ADD_MESSAGE_SUCCESS':\n                //const newState = state.messages.slice(0);\n                //newState.push(action.payload);    \n            return {\n                    //TODO: FIX THIS\n                    ...state,\n                    messages: [...state.messages, action.payload],\n                    //messages: newState,\n                    loading: false,\n                    error: null\n                };\n        case 'ADD_MESSAGE_FAILURE':\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            };\n        default:\n            return state;\n        }\n    }\n\nexport default backendReducer;\n"]},"metadata":{},"sourceType":"module"}