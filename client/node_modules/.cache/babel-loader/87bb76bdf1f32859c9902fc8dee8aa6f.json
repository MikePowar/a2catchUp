{"ast":null,"code":"import _objectSpread from \"/Users/mikepowar/a2React-Ninja-master/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_MESSAGES_BEGIN, FETCH_MESSAGES_FAULURE, FETCH_MESSAGES_SUCCESS } from '../actions/backendActions';\nconst initState = {\n  messages: [],\n  loading: false,\n  error: null\n};\n\nconst backendReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'FETCH_MESSAGES_BEGIN':\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case 'FETCH_MESSAGES_FAILURE':\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        messages: []\n      });\n\n    case 'FETCH_MESSAGES_SUCCESS':\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        messages: action.payload.messages\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default backendReducer;","map":{"version":3,"sources":["/Users/mikepowar/a2React-Ninja-master/src/reducers/backend.js"],"names":["FETCH_MESSAGES_BEGIN","FETCH_MESSAGES_FAULURE","FETCH_MESSAGES_SUCCESS","initState","messages","loading","error","backendReducer","state","action","type","payload"],"mappings":";AAAA,SAASA,oBAAT,EAA+BC,sBAA/B,EAAuDC,sBAAvD,QAAqF,2BAArF;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,EADI;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAMA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA+B;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,sBAAL;AACI;AACA;AACI,+BACOF,KADP;AAEIH,QAAAA,OAAO,EAAE,IAFb;AAGIC,QAAAA,KAAK,EAAE;AAHX;;AAKR,SAAK,wBAAL;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BACOE,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL,KAH1B;AAIIF,QAAAA,QAAQ,EAAE;AAJd;;AAMJ,SAAK,wBAAL;AACI;AACA;AACA,+BACOI,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGID,QAAAA,QAAQ,EAAEK,MAAM,CAACE,OAAP,CAAeP;AAH7B;;AAKJ;AACI,aAAOI,KAAP;AAhCR;AAkCC,CAnCL;;AAqCA,eAAeD,cAAf","sourcesContent":["import { FETCH_MESSAGES_BEGIN, FETCH_MESSAGES_FAULURE, FETCH_MESSAGES_SUCCESS } from '../actions/backendActions';\n\nconst initState = {\n    messages: [],\n    loading: false,\n    error: null\n};\n\nconst backendReducer = (state = initState, action) => {\n    switch (action.type){\n        case 'FETCH_MESSAGES_BEGIN':\n            // Mark the state as \"loading\" so we can show a spinner or something\n            // Also, reset any errors. We're starting fresh.\n                return {\n                    ...state,\n                    loading: true,\n                    error: null\n                };\n        case 'FETCH_MESSAGES_FAILURE':\n            // The request failed. It's done. So set loading to \"false\".\n            // Save the error, so we can display it somewhere.\n            // Since it failed, we don't have items to display anymore, so set `items` empty.\n            //\n            // This is all up to you and your app though:\n            // maybe you want to keep the items around!\n            // Do whatever seems right for your use case.\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error,\n                messages: []\n                };\n        case 'FETCH_MESSAGES_SUCCESS':\n            // All done: set loading \"false\".\n            // Also, replace the items with the ones from the server\n            return {\n                ...state,\n                loading: false,\n                messages: action.payload.messages\n            };\n        default:\n            return state;\n        }\n    }\n\nexport default backendReducer;\n"]},"metadata":{},"sourceType":"module"}