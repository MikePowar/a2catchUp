{"ast":null,"code":"import { ADD_MESSAGE } from \"../actions\";\nimport { DELETE_MESSAGE } from \"../actions\";\nimport Messages, { state } from \"../components/Messages\";\nconst initialMessages = {\n  messages: [{\n    name: '',\n    message: '',\n    id: 1\n  }] // reducer function takes two arguments: 1) state (set with above array) & 2) an action\n  // reducer returns a new state based on the action, updating the given(old) state accordingly\n\n};\n\nconst messageReducer = (state = initialMessages, action) => {\n  switch (action.type) {\n    case 'DELETE_MESSAGE':\n      console.log(action);\n      let newMessages = state.messages.filter(message => {\n        return action.id !== message.id;\n      });\n      return {\n        messages: newMessages\n      };\n\n    case 'ADD_MESSAGE':\n      console.log(action);\n      const newState = state.messages.slice(0);\n      newState.push(action.payload);\n      return {\n        messages: newState\n      };\n\n    default:\n      console.log(state);\n      return state;\n  }\n};\n\nexport default messageReducer;","map":{"version":3,"sources":["/Users/mikepowar/a2React-Ninja-master/src/reducers/messageReducer.js"],"names":["ADD_MESSAGE","DELETE_MESSAGE","Messages","state","initialMessages","messages","name","message","id","messageReducer","action","type","console","log","newMessages","filter","newState","slice","push","payload"],"mappings":"AAAA,SAASA,WAAT,QAA4B,YAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAOC,QAAP,IAAmBC,KAAnB,QAAgC,wBAAhC;AAEA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,QAAQ,EAAE,CACN;AACIC,IAAAA,IAAI,EAAE,EADV;AAEIC,IAAAA,OAAO,EAAE,EAFb;AAGIC,IAAAA,EAAE,EAAE;AAHR,GADM,CADU,CAUxB;AACA;;AAXwB,CAAxB;;AAYA,MAAMC,cAAc,GAAG,CAACN,KAAK,GAAGC,eAAT,EAA0BM,MAA1B,KAAqC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,gBAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,UAAII,WAAW,GAAGX,KAAK,CAACE,QAAN,CAAeU,MAAf,CAAsBR,OAAO,IAAI;AAC/C,eAAOG,MAAM,CAACF,EAAP,KAAcD,OAAO,CAACC,EAA7B;AACH,OAFiB,CAAlB;AAGA,aAAO;AACHH,QAAAA,QAAQ,EAAES;AADP,OAAP;;AAIJ,SAAK,aAAL;AACIF,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,YAAMM,QAAQ,GAAGb,KAAK,CAACE,QAAN,CAAeY,KAAf,CAAqB,CAArB,CAAjB;AACAD,MAAAA,QAAQ,CAACE,IAAT,CAAcR,MAAM,CAACS,OAArB;AACA,aAAO;AACHd,QAAAA,QAAQ,EAAEW;AADP,OAAP;;AAIJ;AACIJ,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACA,aAAOA,KAAP;AApBR;AAuBH,CAxBD;;AA0BA,eAAeM,cAAf","sourcesContent":["import { ADD_MESSAGE } from \"../actions\";\nimport { DELETE_MESSAGE } from \"../actions\";\nimport Messages, { state } from \"../components/Messages\";\n\nconst initialMessages = {\n    messages: [\n        {\n            name: '',\n            message: '',\n            id: 1\n        }\n    ]\n        }\n\n// reducer function takes two arguments: 1) state (set with above array) & 2) an action\n// reducer returns a new state based on the action, updating the given(old) state accordingly\nconst messageReducer = (state = initialMessages, action) => {\n    switch (action.type){\n        case 'DELETE_MESSAGE':\n            console.log(action);  \n            let newMessages = state.messages.filter(message => {\n                return action.id !== message.id\n            });\n            return {\n                messages: newMessages\n                };\n        \n        case 'ADD_MESSAGE':\n            console.log(action);\n            const newState = state.messages.slice(0);\n            newState.push(action.payload);\n            return {\n                messages: newState\n            };\n\n        default:\n            console.log(state); \n            return state;\n            \n    }\n}\n\nexport default messageReducer\n\n\n"]},"metadata":{},"sourceType":"module"}