{"ast":null,"code":"import axios from 'axios';\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE'; // not used in setup as is because actions are called in components and then adjusted\n// in reducer.\n//TODO: trying to just get one addMessage working...\n// export function addMessage(message){\n//     return { type: ADD_MESSAGE, payload: message }\n// }\n//pass index or message\n\nexport function deleteMessage(message) {\n  return {\n    type: DELETE_MESSAGE,\n    payload: message\n  };\n} //New from thunk tutorial (https://alligator.io/redux/redux-thunk/)\n\nexport const ADD_MESSAGE_SUCCESS = 'ADD_MESSAGE_SUCCESS';\nexport const ADD_MESSAGE_FAILURE = 'ADD_MESSAGE_FAILURE';\nexport const ADD_MESSAGE_STARTED = 'ADD_MESSAGE_STARTED'; //export const addMessage = ({ title, userId }) => {\n//TODO: could end up changing {message} to props ? as above\n\nexport const addMessage = ({\n  name,\n  message,\n  id\n}) => {\n  console.log({\n    name,\n    message,\n    id\n  }); //TODO: look more into getState and how to use here\n  //return (dispatch, getState) => {\n\n  return dispatch => {\n    dispatch(addMessageStarted()); //console.log('current state: ', getState());\n    //TODO: note: those aren't quotation marks for http address\n\n    axios.post('/messages', {\n      name,\n      message,\n      id\n    }).then(res => {\n      dispatch(addMessageSuccess(res.data));\n    }).catch(err => {\n      dispatch(addMessageFailure(err.message));\n    });\n  };\n};\n\nconst addMessageSuccess = message => ({\n  type: ADD_MESSAGE_SUCCESS,\n  payload: {\n    message\n  }\n});\n\nconst addMessageStarted = () => ({\n  type: ADD_MESSAGE_STARTED\n});\n\nconst addMessageFailure = error => ({\n  type: ADD_MESSAGE_FAILURE,\n  payload: {\n    error\n  }\n});","map":{"version":3,"sources":["/Users/mikepowar/a2React-Ninja-master/src/actions/index.jsx"],"names":["axios","ADD_MESSAGE","DELETE_MESSAGE","deleteMessage","message","type","payload","ADD_MESSAGE_SUCCESS","ADD_MESSAGE_FAILURE","ADD_MESSAGE_STARTED","addMessage","name","id","console","log","dispatch","addMessageStarted","post","then","res","addMessageSuccess","data","catch","err","addMessageFailure","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAEP;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAA+B;AAClC,SAAO;AAAEC,IAAAA,IAAI,EAAEH,cAAR;AAAwBI,IAAAA,OAAO,EAAEF;AAAjC,GAAP;AACH,C,CAED;;AAEA,OAAO,MAAMG,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B,C,CAIP;AACI;;AACJ,OAAO,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOP,EAAAA,OAAP;AAAgBQ,EAAAA;AAAhB,CAAD,KAAyB;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,IAAAA,IAAD;AAAOP,IAAAA,OAAP;AAAgBQ,IAAAA;AAAhB,GAAZ,EAD+C,CAE/C;AACA;;AACA,SAAQG,QAAD,IAAc;AACrBA,IAAAA,QAAQ,CAACC,iBAAiB,EAAlB,CAAR,CADqB,CAGrB;AAEA;;AACAhB,IAAAA,KAAK,CACAiB,IADL,CACU,WADV,EACuB;AACnBN,MAAAA,IADmB;AAEnBP,MAAAA,OAFmB;AAGnBQ,MAAAA;AAHmB,KADvB,EAMKM,IANL,CAMUC,GAAG,IAAI;AACTJ,MAAAA,QAAQ,CAACK,iBAAiB,CAACD,GAAG,CAACE,IAAL,CAAlB,CAAR;AACH,KARL,EASKC,KATL,CASWC,GAAG,IAAI;AACVR,MAAAA,QAAQ,CAACS,iBAAiB,CAACD,GAAG,CAACnB,OAAL,CAAlB,CAAR;AACH,KAXL;AAYC,GAlBD;AAmBH,CAvBM;;AAyBP,MAAMgB,iBAAiB,GAAGhB,OAAO,KAAK;AAClCC,EAAAA,IAAI,EAAEE,mBAD4B;AAElCD,EAAAA,OAAO,EAAE;AAAEF,IAAAA;AAAF;AAFyB,CAAL,CAAjC;;AAKA,MAAMY,iBAAiB,GAAG,OAAO;AAC7BX,EAAAA,IAAI,EAAEI;AADuB,CAAP,CAA1B;;AAIA,MAAMe,iBAAiB,GAAGC,KAAK,KAAK;AAChCpB,EAAAA,IAAI,EAAEG,mBAD0B;AAEhCF,EAAAA,OAAO,EAAE;AACLmB,IAAAA;AADK;AAFuB,CAAL,CAA/B","sourcesContent":["import axios from 'axios';\n\nexport const ADD_MESSAGE = 'ADD_MESSAGE'\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE'\n\n// not used in setup as is because actions are called in components and then adjusted\n// in reducer.\n\n//TODO: trying to just get one addMessage working...\n// export function addMessage(message){\n//     return { type: ADD_MESSAGE, payload: message }\n// }\n\n//pass index or message\nexport function deleteMessage(message){\n    return { type: DELETE_MESSAGE, payload: message }\n}\n\n//New from thunk tutorial (https://alligator.io/redux/redux-thunk/)\n\nexport const ADD_MESSAGE_SUCCESS = 'ADD_MESSAGE_SUCCESS';\nexport const ADD_MESSAGE_FAILURE = 'ADD_MESSAGE_FAILURE';\nexport const ADD_MESSAGE_STARTED = 'ADD_MESSAGE_STARTED';\n\n\n\n//export const addMessage = ({ title, userId }) => {\n    //TODO: could end up changing {message} to props ? as above\nexport const addMessage = ({name, message, id}) => {\n    console.log({name, message, id});\n    //TODO: look more into getState and how to use here\n    //return (dispatch, getState) => {\n    return (dispatch) => {\n    dispatch(addMessageStarted());\n\n    //console.log('current state: ', getState());\n\n    //TODO: note: those aren't quotation marks for http address\n    axios\n        .post('/messages', {\n        name,\n        message,\n        id\n        })\n        .then(res => {\n            dispatch(addMessageSuccess(res.data));\n        })\n        .catch(err => {\n            dispatch(addMessageFailure(err.message));\n        });\n    };\n};\n\nconst addMessageSuccess = message => ({\n    type: ADD_MESSAGE_SUCCESS,\n    payload: { message }\n});\n\nconst addMessageStarted = () => ({\n    type: ADD_MESSAGE_STARTED\n});\n\nconst addMessageFailure = error => ({\n    type: ADD_MESSAGE_FAILURE,\n    payload: {\n        error\n    }\n});"]},"metadata":{},"sourceType":"module"}