{"ast":null,"code":"import { ADD_MESSAGE } from \"../actions\";\nimport { DELETE_MESSAGE } from \"../actions\";\nimport Messages, { state } from \"../components/Messages\";\nconst initialMessages = {\n  messages: [{\n    name: 'Alvin',\n    message: 'Hi',\n    id: 1\n  }, {\n    name: 'Todd',\n    message: 'Hello',\n    id: 2\n  }, {\n    name: 'Kawhi',\n    message: 'What it do ?',\n    id: 3\n  }]\n};\nconst ExpressMessages = Messages.messages;\nconsole.log(ExpressMessages); // reducer function takes two arguments: 1) state (set with above array) & 2) an action\n// reducer returns a new state based on the action, updating the given(old) state accordingly\n\nconst messageReducer = (state = initialMessages, action) => {\n  switch (action.type) {\n    case 'INITIAL_MESSAGES':\n      console.log(action);\n      let messagesExpress = []; //A3: Component Lifecycle method to receive messages info to render    \n\n      function componentDidMount() {\n        fetch('/users').then(res => res.json()).then(messagesExpress => this.setState({\n          messagesExpress\n        }));\n      }\n\n      ;\n      componentDidMount(); //return new state - initial messages array\n\n      return {\n        messages: messagesExpress\n      };\n\n    case 'DELETE_MESSAGE':\n      console.log(action);\n      let newMessages = state.messages.filter(message => {\n        return action.id !== message.id;\n      });\n      return {\n        messages: newMessages\n      };\n\n    case 'ADD_MESSAGE':\n      console.log(action);\n      const newState = state.messages.slice(0);\n      newState.push(action.payload);\n      return {\n        messages: newState\n      };\n\n    default:\n      console.log(state);\n      return state;\n  }\n};\n\nexport default messageReducer;","map":{"version":3,"sources":["/Users/mikepowar/a2React-Ninja-master/src/reducers/index.js"],"names":["ADD_MESSAGE","DELETE_MESSAGE","Messages","state","initialMessages","messages","name","message","id","ExpressMessages","console","log","messageReducer","action","type","messagesExpress","componentDidMount","fetch","then","res","json","setState","newMessages","filter","newState","slice","push","payload"],"mappings":"AAAA,SAASA,WAAT,QAA4B,YAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAOC,QAAP,IAAmBC,KAAnB,QAAgC,wBAAhC;AAEA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,QAAQ,EAAE,CACF;AAACC,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,OAAO,EAAE,IAAzB;AAA+BC,IAAAA,EAAE,EAAE;AAAnC,GADE,EAEF;AAACF,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,OAAO,EAAE,OAAxB;AAAiCC,IAAAA,EAAE,EAAE;AAArC,GAFE,EAGF;AAACF,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,OAAO,EAAE,cAAzB;AAAyCC,IAAAA,EAAE,EAAE;AAA7C,GAHE;AADU,CAAxB;AAUA,MAAMC,eAAe,GAAGP,QAAQ,CAACG,QAAjC;AACAK,OAAO,CAACC,GAAR,CAAYF,eAAZ,E,CACA;AACA;;AACA,MAAMG,cAAc,GAAG,CAACT,KAAK,GAAGC,eAAT,EAA0BS,MAA1B,KAAqC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,kBAAL;AACIJ,MAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AACA,UAAIE,eAAe,GAAG,EAAtB,CAFJ,CAGI;;AACA,eAASC,iBAAT,GAA4B;AACxBC,QAAAA,KAAK,CAAC,QAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMH,eAAe,IAAI,KAAKM,QAAL,CAAc;AAAEN,UAAAA;AAAF,SAAd,CAFzB;AAGH;;AAAA;AACDC,MAAAA,iBAAiB,GATrB,CAUI;;AACA,aAAO;AACHX,QAAAA,QAAQ,EAAEU;AADP,OAAP;;AAIJ,SAAK,gBAAL;AACIL,MAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AACA,UAAIS,WAAW,GAAGnB,KAAK,CAACE,QAAN,CAAekB,MAAf,CAAsBhB,OAAO,IAAI;AAC/C,eAAOM,MAAM,CAACL,EAAP,KAAcD,OAAO,CAACC,EAA7B;AACH,OAFiB,CAAlB;AAGA,aAAO;AACHH,QAAAA,QAAQ,EAAEiB;AADP,OAAP;;AAIJ,SAAK,aAAL;AACIZ,MAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AACA,YAAMW,QAAQ,GAAGrB,KAAK,CAACE,QAAN,CAAeoB,KAAf,CAAqB,CAArB,CAAjB;AACAD,MAAAA,QAAQ,CAACE,IAAT,CAAcb,MAAM,CAACc,OAArB;AACA,aAAO;AACHtB,QAAAA,QAAQ,EAAEmB;AADP,OAAP;;AAIJ;AACId,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA,aAAOA,KAAP;AAnCR;AAsCH,CAvCD;;AAyCA,eAAeS,cAAf","sourcesContent":["import { ADD_MESSAGE } from \"../actions\";\nimport { DELETE_MESSAGE } from \"../actions\";\nimport Messages, { state } from \"../components/Messages\";\n\nconst initialMessages = {\n    messages: [\n            {name: 'Alvin', message: 'Hi', id: 1},\n            {name: 'Todd', message: 'Hello', id: 2},\n            {name: 'Kawhi', message: 'What it do ?', id: 3}\n            ]\n        }\n\n\n\nconst ExpressMessages = Messages.messages;\nconsole.log(ExpressMessages);\n// reducer function takes two arguments: 1) state (set with above array) & 2) an action\n// reducer returns a new state based on the action, updating the given(old) state accordingly\nconst messageReducer = (state = initialMessages, action) => {\n    switch (action.type){\n        case 'INITIAL_MESSAGES':\n            console.log(action);\n            let messagesExpress = [];\n            //A3: Component Lifecycle method to receive messages info to render    \n            function componentDidMount(){\n                fetch('/users')\n                .then(res => res.json())\n                .then(messagesExpress => this.setState({ messagesExpress }));\n            };\n            componentDidMount();\n            //return new state - initial messages array\n            return {\n                messages: messagesExpress\n                };\n\n        case 'DELETE_MESSAGE':\n            console.log(action);  \n            let newMessages = state.messages.filter(message => {\n                return action.id !== message.id\n            });\n            return {\n                messages: newMessages\n                };\n        \n        case 'ADD_MESSAGE':\n            console.log(action);\n            const newState = state.messages.slice(0);\n            newState.push(action.payload);\n            return {\n                messages: newState\n            };\n\n        default:\n            console.log(state); \n            return state;\n            \n    }\n}\n\nexport default messageReducer\n\n\n"]},"metadata":{},"sourceType":"module"}