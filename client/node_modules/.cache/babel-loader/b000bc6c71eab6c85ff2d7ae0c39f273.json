{"ast":null,"code":"import _objectSpread from \"/Users/mikepowar/a2React-Ninja-master/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport Axios from \"axios\";\nimport { FETCH_MESSAGES_BEGIN, FETCH_MESSAGES_FAULURE, FETCH_MESSAGES_SUCCESS } from './actions/backendActions';\nconst initState = {\n  messages: [],\n  loading: false,\n  error: null\n};\n\nconst backendReducer = (state = initState, action) => {\n  switch (action.type) {\n    // case 'CREATE_MESSAGES':{ \n    //     console.log('created messages', action.message)\n    //     return state;\n    //     }\n    case 'FETCH_MESSAGES_BEGIN':\n      {\n        // Mark the state as \"loading\" so we can show a spinner or something\n        // Also, reset any errors. We're starting fresh.\n        return _objectSpread({}, state, {\n          loading: true,\n          error: null\n        });\n      }\n\n    case 'FETCH_MESSAGES_FAILURE':\n      {\n        console.log(state); // The request failed. It's done. So set loading to \"false\".\n        // Save the error, so we can display it somewhere.\n        // Since it failed, we don't have items to display anymore, so set `items` empty.\n        //\n        // This is all up to you and your app though:\n        // maybe you want to keep the items around!\n        // Do whatever seems right for your use case.\n\n        return _objectSpread({}, state, {\n          loading: false,\n          error: action.payload.error,\n          items: []\n        });\n      }\n\n    case 'FETCH_MESSAGES_SUCCESS':\n      {\n        // All done: set loading \"false\".\n        // Also, replace the items with the ones from the server\n        return _objectSpread({}, state, {\n          loading: false,\n          items: action.payload.messages\n        });\n      }\n  }\n\n  return state;\n};\n\nexport default backendReducer;","map":{"version":3,"sources":["/Users/mikepowar/a2React-Ninja-master/src/reducers/backend.js"],"names":["Axios","FETCH_MESSAGES_BEGIN","FETCH_MESSAGES_FAULURE","FETCH_MESSAGES_SUCCESS","initState","messages","loading","error","backendReducer","state","action","type","console","log","payload","items"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,EAAuDC,sBAAvD,QAAqF,0BAArF;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,EADI;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAMA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA+B;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI;AACA;AACA;AACA;AACA,SAAK,sBAAL;AAA4B;AACxB;AACA;AACI,iCACOF,KADP;AAEIH,UAAAA,OAAO,EAAE,IAFb;AAGIC,UAAAA,KAAK,EAAE;AAHX;AAKP;;AACD,SAAK,wBAAL;AAA8B;AAC1BK,QAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAD0B,CAE1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,iCACOA,KADP;AAEIH,UAAAA,OAAO,EAAE,KAFb;AAGIC,UAAAA,KAAK,EAAEG,MAAM,CAACI,OAAP,CAAeP,KAH1B;AAIIQ,UAAAA,KAAK,EAAE;AAJX;AAOH;;AACD,SAAK,wBAAL;AAA8B;AAC1B;AACA;AACA,iCACON,KADP;AAEIH,UAAAA,OAAO,EAAE,KAFb;AAGIS,UAAAA,KAAK,EAAEL,MAAM,CAACI,OAAP,CAAeT;AAH1B;AAKH;AAvCL;;AAyCA,SAAOI,KAAP;AACH,CA3CD;;AA6CA,eAAeD,cAAf","sourcesContent":["import Axios from \"axios\";\nimport { FETCH_MESSAGES_BEGIN, FETCH_MESSAGES_FAULURE, FETCH_MESSAGES_SUCCESS } from './actions/backendActions';\n\nconst initState = {\n    messages: [],\n    loading: false,\n    error: null\n};\n\nconst backendReducer = (state = initState, action) => {\n    switch (action.type){\n        // case 'CREATE_MESSAGES':{ \n        //     console.log('created messages', action.message)\n        //     return state;\n        //     }\n        case 'FETCH_MESSAGES_BEGIN':{\n            // Mark the state as \"loading\" so we can show a spinner or something\n            // Also, reset any errors. We're starting fresh.\n                return {\n                    ...state,\n                    loading: true,\n                    error: null\n                };\n        }\n        case 'FETCH_MESSAGES_FAILURE':{\n            console.log(state);\n            // The request failed. It's done. So set loading to \"false\".\n            // Save the error, so we can display it somewhere.\n            // Since it failed, we don't have items to display anymore, so set `items` empty.\n            //\n            // This is all up to you and your app though:\n            // maybe you want to keep the items around!\n            // Do whatever seems right for your use case.\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error,\n                items: []\n                };\n\n        }\n        case 'FETCH_MESSAGES_SUCCESS':{\n            // All done: set loading \"false\".\n            // Also, replace the items with the ones from the server\n            return {\n                ...state,\n                loading: false,\n                items: action.payload.messages\n            };\n        }\n    }\n    return state\n}\n\nexport default backendReducer;\n"]},"metadata":{},"sourceType":"module"}