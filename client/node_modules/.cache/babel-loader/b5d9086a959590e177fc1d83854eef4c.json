{"ast":null,"code":"import { ADD_MESSAGE } from \"../actions\";\nimport { DELETE_MESSAGE } from \"../actions\";\nimport Messages, { state } from \"../components/Messages\";\nconst initialMessages = {\n  messages: [] // reducer function takes two arguments: 1) state (set with above array) & 2) an action\n  // reducer returns a new state based on the action, updating the given(old) state accordingly\n\n};\n\nconst messageReducer = (state = initialMessages, action) => {\n  console.log(this.props);\n\n  switch (action.type) {\n    case 'DELETE_MESSAGE':\n      console.log(action);\n      let newMessages = state.messages.filter(message => {\n        return action.id !== message.id;\n      });\n      return {\n        messages: newMessages\n      };\n\n    case 'ADD_MESSAGE':\n      console.log(action);\n      const newState = state.messages.slice(0);\n      newState.push(action.payload);\n      return {\n        messages: newState\n      };\n\n    default:\n      console.log(state);\n      return state;\n  }\n};\n\nexport default messageReducer;","map":{"version":3,"sources":["/Users/mikepowar/a2React-Ninja-master/src/reducers/messageReducer.js"],"names":["ADD_MESSAGE","DELETE_MESSAGE","Messages","state","initialMessages","messages","messageReducer","action","console","log","props","type","newMessages","filter","message","id","newState","slice","push","payload"],"mappings":"AAAA,SAASA,WAAT,QAA4B,YAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAOC,QAAP,IAAmBC,KAAnB,QAAgC,wBAAhC;AAEA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,QAAQ,EAAE,EADU,CAIxB;AACA;;AALwB,CAAxB;;AAMA,MAAMC,cAAc,GAAG,CAACH,KAAK,GAAGC,eAAT,EAA0BG,MAA1B,KAAqC;AACxDC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;;AACA,UAAQH,MAAM,CAACI,IAAf;AACI,SAAK,gBAAL;AACIH,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAIK,WAAW,GAAGT,KAAK,CAACE,QAAN,CAAeQ,MAAf,CAAsBC,OAAO,IAAI;AAC/C,eAAOP,MAAM,CAACQ,EAAP,KAAcD,OAAO,CAACC,EAA7B;AACH,OAFiB,CAAlB;AAGA,aAAO;AACHV,QAAAA,QAAQ,EAAEO;AADP,OAAP;;AAIJ,SAAK,aAAL;AACIJ,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,YAAMS,QAAQ,GAAGb,KAAK,CAACE,QAAN,CAAeY,KAAf,CAAqB,CAArB,CAAjB;AACAD,MAAAA,QAAQ,CAACE,IAAT,CAAcX,MAAM,CAACY,OAArB;AACA,aAAO;AACHd,QAAAA,QAAQ,EAAEW;AADP,OAAP;;AAIJ;AACIR,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,aAAOA,KAAP;AApBR;AAuBH,CAzBD;;AA2BA,eAAeG,cAAf","sourcesContent":["import { ADD_MESSAGE } from \"../actions\";\nimport { DELETE_MESSAGE } from \"../actions\";\nimport Messages, { state } from \"../components/Messages\";\n\nconst initialMessages = {\n    messages: []\n        }\n\n// reducer function takes two arguments: 1) state (set with above array) & 2) an action\n// reducer returns a new state based on the action, updating the given(old) state accordingly\nconst messageReducer = (state = initialMessages, action) => {\n    console.log(this.props)\n    switch (action.type){\n        case 'DELETE_MESSAGE':\n            console.log(action);  \n            let newMessages = state.messages.filter(message => {\n                return action.id !== message.id\n            });\n            return {\n                messages: newMessages\n                };\n        \n        case 'ADD_MESSAGE':\n            console.log(action);\n            const newState = state.messages.slice(0);\n            newState.push(action.payload);\n            return {\n                messages: newState\n            };\n\n        default:\n            console.log(state); \n            return state;\n            \n    }\n}\n\nexport default messageReducer\n\n\n"]},"metadata":{},"sourceType":"module"}