{"ast":null,"code":"// import { ADD_MESSAGE } from \"../actions\";\n// import { DELETE_MESSAGE } from \"../actions\";\n// import Messages, { state } from \"../components/Messages\";\n// const initialMessages = {\n//     messages: [\n//         {\n//             name: '',\n//             message: '',\n//             id: 1\n//         }\n//     ]\n//         }\n// // reducer function takes two arguments: 1) state (set with above array) & 2) an action\n// // reducer returns a new state based on the action, updating the given(old) state accordingly\n// const messageReducer = (state = initialMessages, action) => {\n//     switch (action.type){\n//         case 'DELETE_MESSAGE':\n//             console.log(action);  \n//             let newMessages = state.messages.filter(message => {\n//                 return action.id !== message.id\n//             });\n//             return {\n//                 messages: newMessages\n//                 };\n//         case 'ADD_MESSAGE':\n//             console.log(action);\n//             console.log(state);\n//             const newState = state.messages.slice(0);\n//             newState.push(action.payload);\n//             return {\n//                 messages: newState\n//             };\n//         default:\n//             console.log(state); \n//             return state;\n//     }\n// }\n// export default messageReducer","map":{"version":3,"sources":["/Users/mikepowar/a2React-Ninja-master/src/reducers/messageReducer.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// import { ADD_MESSAGE } from \"../actions\";\n// import { DELETE_MESSAGE } from \"../actions\";\n// import Messages, { state } from \"../components/Messages\";\n\n// const initialMessages = {\n//     messages: [\n//         {\n//             name: '',\n//             message: '',\n//             id: 1\n//         }\n//     ]\n//         }\n\n// // reducer function takes two arguments: 1) state (set with above array) & 2) an action\n// // reducer returns a new state based on the action, updating the given(old) state accordingly\n// const messageReducer = (state = initialMessages, action) => {\n//     switch (action.type){\n//         case 'DELETE_MESSAGE':\n//             console.log(action);  \n//             let newMessages = state.messages.filter(message => {\n//                 return action.id !== message.id\n//             });\n//             return {\n//                 messages: newMessages\n//                 };\n        \n//         case 'ADD_MESSAGE':\n//             console.log(action);\n//             console.log(state);\n//             const newState = state.messages.slice(0);\n//             newState.push(action.payload);\n//             return {\n//                 messages: newState\n//             };\n\n//         default:\n//             console.log(state); \n//             return state;\n            \n//     }\n// }\n\n// export default messageReducer\n\n\n"]},"metadata":{},"sourceType":"module"}